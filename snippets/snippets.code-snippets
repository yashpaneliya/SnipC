{
  "Using namespace std": {
    "prefix": "using",
    "body": "using namespace std;",
    "description": "Using namespace std",
    "scope": "source.cpp"
  },
  "Include library": {
    "prefix": "include",
    "body": "#include<${1:}>",
    "description": "Include library",
    "scope": "source.cpp,source.c"
  },
  "define statement":{
    "prefix": "define",
    "body": "#define ${1:}",
    "description": "define statement",
    "scope": "source.cpp,source.c"
  },
  "if Block": {
    "prefix": "if",
    "body": ["if (${1:}) {", "", "}"],
    "description": "Create a simple if decision maker"
  },
  "if-else Block": {
    "prefix": "if",
    "body": ["if (${1:}) {", "", "} else {", "", "}"],
    "description": "Create an if-else block",
    "scope": "source.cpp,source.c"
  },
  "elseif Block": {
    "prefix": "if",
    "body": [
      "if (${1:}) {",
      "",
      "} else if (${2:}) {",
      "",
      "}",
      "else {",
      "",
      "}"
    ],
    "description": "Create an elseif block",
    "scope": "source.cpp,source.c"
  },
  "For Loop block": {
    "prefix": "for(",
    "body": ["for ( ${1:} ){", "", "}"],
    "description": "Create a For-Loop Block",
    "scope": "source.cpp,source.c"
  },
  "While Loop block": {
    "prefix": "while(",
    "body": ["while ( ${1:} ){", "", "}"],
    "description": "Create a While-Loop Block",
    "scope": "source.cpp,source.c"
  },
  "Do-While Loop block": {
    "prefix": "do",
    "body": ["do {", "", "} while ( ${1:} );"],
    "description": "Create a Do-While Loop Block",
    "scope": "source.cpp,source.c"
  },
  "Switch Block": {
    "prefix": "switch(",
    "body": [
      "switch ( ${1:} ){",
      "",
      "\tcase ${2:}:",
      "",
      "\tbreak;",
      "",
      "\tdefault:",
      "",
      "}"
    ],
    "description": "Create a Switch Block",
    "scope": "source.cpp,source.c"
  },
  "Case Block": {
    "prefix": "case",
    "body": ["case ${1:}:", "", "break;"],
    "description": "Create a Case Block",
    "scope": "source.cpp,source.c"
  },
  "Default Block": {
    "prefix": "default",
    "body": ["default:", "", "break;"],
    "description": "Create a Default Block",
    "scope": "source.cpp,source.c"
  },
  "C++ code template": {
    "prefix": "cpp",
    "body": [
      "#include <iostream>",
      "",
      "using namespace std;",
      "",
      "int main()",
      "{",
      "",
      "\treturn 0;",
      "}",
      ""
    ],
    "description": "Create a C++ code template",
    "scope": "source.cpp"
  },
  "try-catch block": {
    "prefix": "try",
    "body": ["try {", "", "} catch (${1:}) {", "", "}"],
    "description": "Create a try-catch block",
    "scope": "source.cpp,source.c"
  },
  "throw block": {
    "prefix": "throw",
    "body": ["throw ${1:};"],
    "description": "Create a throw block",
    "scope": "source.cpp,source.c"
  },
  "catch block": {
    "prefix": "catch",
    "body": ["catch (${1:}) {", "", "}"],
    "description": "Create a catch block",
    "scope": "source.cpp,source.c"
  },
  "try-catch-finally block": {
    "prefix": "try",
    "body": ["try {", "", "} catch (${1:}) {", "", "} finally {", "", "}"],
    "description": "Create a try-catch-finally block",
    "scope": "source.cpp,source.c"
  },
  "cout": {
    "prefix": "cout",
    "body": "cout << $1",
    "description": "cout statement"
  },
  "cin": {
    "prefix": "cin",
    "body": "cin >> $1",
    "description": "cin statement"
  },
  "std::cout": {
    "prefix": "stdcout",
    "body": "std::cout << $1",
    "description": "std::cout statement"
  },
  "std::cin": {
    "prefix": "stdcin",
    "body": "std::cin >> $1",
    "description": "std::cin statement"
  },
  "function": {
    "prefix": "funct",
    "body": "\r\n${1:int} ${2:function_name}(${3:/* args */}) {\r\n\t${0:/* code */}\r\n}\r\n",
    "description": "Create a Regular Function",
    "scope": "source.c,  source.c++"
  },
  "forever": {
    "prefix": "forev",
    "body": "for(;;)\n{\n\t${0:/* code */}\n}\n",
    "description": "Forever Loop"
  },
  "while forever": {
    "prefix": "while",
    "body": "while(true)\n{\n\t${0:/* code */}\n}\n",
    "description": "While Forever Loop"
  },
  "do forever": {
    "prefix": "do",
    "body": "do\n{\n\t${0:/* code */}\n}\nwhile(true);\n",
    "description": "Do Forever Loop"
  },
  "struct": {
    "prefix": "struct",
    "body": ["struct ${1}", "{", "$2", "};\n"],
    "description": "Create a structure"
  },
  "union": {
    "prefix": "union",
    "body": ["union ${1}", "{", "$2", "};"],
    "description": "Create an union"
  }
}
